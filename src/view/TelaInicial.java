/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import model.User;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import db.Conexao;
import java.sql.PreparedStatement;

/**
 *
 * @author 200901268
 */
public class TelaInicial extends javax.swing.JFrame {

    private Conexao conexao;
    private ViewCadastro viewCadastro;
    private ViewUpdate viewUpdate;
    DefaultTableModel model;

    /**
     * Creates new form TelaInicial
     */
    public TelaInicial() throws SQLException {
        initComponents();
        conexao = new Conexao();
        model = (DefaultTableModel) jTable1.getModel();
        viewCadastro = new ViewCadastro(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        btnConn = new javax.swing.JButton();
        btnShowTb = new javax.swing.JButton();
        btnInsert = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnDeletar = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lblConn = new javax.swing.JLabel();
        txtPesquisa = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnConn.setText("Conectar BD");
        btnConn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnActionPerformed(evt);
            }
        });

        btnShowTb.setText("Atualizar Tabela");
        btnShowTb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTbActionPerformed(evt);
            }
        });

        btnInsert.setText("Inserir Item");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},
            new String [] {
                "ID", "Nome", "CPF", "RG", "Data Nascimento"
            }
        )
    );
    jScrollPane1.setViewportView(jTable1);

    btnDeletar.setText("Deletar Item");
    btnDeletar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDeletarActionPerformed(evt);
        }
    });

    btnUpdate.setText("Atualizar Item");
    btnUpdate.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnUpdateActionPerformed(evt);
        }
    });

    btnPesquisar.setText("Pesquisar");
    btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPesquisarActionPerformed(evt);
        }
    });

    jDesktopPane1.setLayer(btnConn, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(btnShowTb, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(btnInsert, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(btnDeletar, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(btnUpdate, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(lblConn, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(txtPesquisa, javax.swing.JLayeredPane.DEFAULT_LAYER);
    jDesktopPane1.setLayer(btnPesquisar, javax.swing.JLayeredPane.DEFAULT_LAYER);

    javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
    jDesktopPane1.setLayout(jDesktopPane1Layout);
    jDesktopPane1Layout.setHorizontalGroup(
        jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jDesktopPane1Layout.createSequentialGroup()
            .addGap(16, 16, 16)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(btnShowTb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnInsert, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDeletar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtPesquisa)
                .addComponent(btnPesquisar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addComponent(lblConn)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE))
            .addContainerGap())
    );
    jDesktopPane1Layout.setVerticalGroup(
        jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jDesktopPane1Layout.createSequentialGroup()
            .addGap(34, 34, 34)
            .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lblConn))
                .addGroup(jDesktopPane1Layout.createSequentialGroup()
                    .addComponent(btnConn)
                    .addGap(18, 18, 18)
                    .addComponent(btnShowTb)
                    .addGap(18, 18, 18)
                    .addComponent(btnInsert)
                    .addGap(18, 18, 18)
                    .addComponent(btnUpdate)
                    .addGap(16, 16, 16)
                    .addComponent(btnDeletar)
                    .addGap(18, 18, 18)
                    .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnPesquisar)))
            .addContainerGap(4, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jDesktopPane1)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnActionPerformed
        // TODO add your handling code here:
        try {
            conexao.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            lblConn.setText("Banco de Dados Conectado!");
        }
    }//GEN-LAST:event_btnConnActionPerformed

    private void btnShowTbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowTbActionPerformed
        // TODO add your handling code here:
        List<User> users = new ArrayList<>();
        String sql = "SELECT id, nome, cpf, rg, dataNasc FROM tb_user";
        try (Connection conn = conexao.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                User user = new User();
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy"); // Define o formato desejado
                java.sql.Date dataNasc = rs.getDate("dataNasc"); // Obt√©m a data do ResultSet
                if (dataNasc != null) {
                    String dataNascStr = dateFormat.format(dataNasc); // Converte a data para String
                    user.setDataNasc(dataNascStr); // Define a data no objeto user
                } else {
                    user.setDataNasc(null); // Ou um valor padr√£o em caso de data nula
                }
                user.setId(rs.getInt("id"));
                user.setNome(rs.getString("nome"));
                user.setCpf(rs.getString("cpf"));
                user.setRg(rs.getString("rg"));
                users.add(user);
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Limpa a tabela antes de adicionar os novos dados

            for (User user : users) {
                Object[] row = {user.getId(), user.getNome(), user.getCpf(), user.getRg(), user.getDataNasc()};
                model.addRow(row); // Adiciona cada usu√°rio como uma linha na tabela
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Tratamento de erro, como exibir uma mensagem ao usu√°rio
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnShowTbActionPerformed

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:
        jDesktopPane1.add(viewCadastro);
        viewCadastro.setVisible(true);
    }//GEN-LAST:event_btnInsertActionPerformed

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
        // TODO add your handling code here:
        try {
            int linha = jTable1.getSelectedRow();
            if (linha == -1) {
                JOptionPane.showMessageDialog(this, "N√£o foi selecionada nenhuma linha");
                return;
            }

            int id = (int) jTable1.getValueAt(linha, 0);

            int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir este usu√°rio?", "Confirma√ß√£o de Exclus√£o", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String sql = "DELETE FROM tb_user WHERE id = ?";
                try (Connection conn = conexao.getConnection();
                        PreparedStatement pstmt = conn.prepareStatement(sql)) {
                    pstmt.setInt(1, id);
                    pstmt.executeUpdate();
                } catch (SQLException e) {
                    throw e;
                } finally {
                    conexao.fecharConexao();
                }
                btnShowTbActionPerformed(evt);
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "N√£o foi selecionada nenhuma linha");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir o usu√°rio: " + ex.getMessage());
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Erro ao conectar ao banco de dados: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        try {
            int linha = jTable1.getSelectedRow();
            if (linha == -1) {
                JOptionPane.showMessageDialog(this, "N√£o foi selecionada nenhuma linha");
                return;
            }

            int id = (int) jTable1.getValueAt(linha, 0);
            String nome = (String) jTable1.getValueAt(linha, 1);
            String cpf = (String) jTable1.getValueAt(linha, 2);
            String rg = (String) jTable1.getValueAt(linha, 3);

            Date dataNasc = (Date) jTable1.getValueAt(linha, 4);
            String dataNascStr = new SimpleDateFormat("dd/MM/yyyy").format(dataNasc);

            viewUpdate = new ViewUpdate(id, nome, cpf, rg, dataNascStr, this);
            jDesktopPane1.add(viewUpdate);
            viewUpdate.setVisible(true);

        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "N√£o foi selecionada nenhuma linha");
        } catch (SQLException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            btnShowTbActionPerformed(evt);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        // TODO add your handling code here:
        String sql = "SELECT id, nome, cpf, rg, dataNasc FROM tb_user"
                + " WHERE nome Like ? OR cpf LIKE ?";
        List<User> users = new ArrayList<>();
        String pesquisa = txtPesquisa.getText();
        try (Connection conn = conexao.getConnection();
                PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, "%" + pesquisa + "%");
            stmt.setString(2, "%" + pesquisa + "%");
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    User user = new User();
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy"); // Define o formato desejado
                    java.sql.Date dataNasc = rs.getDate("dataNasc"); // Obt√©m a data do ResultSet
                    if (dataNasc != null) {
                        String dataNascStr = dateFormat.format(dataNasc); // Converte a data para String
                        user.setDataNasc(dataNascStr); // Define a data no objeto user
                    } else {
                        user.setDataNasc(null); // Ou um valor padr√£o em caso de data nula
                    }
                    user.setId(rs.getInt("id"));
                    user.setNome(rs.getString("nome"));
                    user.setCpf(rs.getString("cpf"));
                    user.setRg(rs.getString("rg"));
                    users.add(user);
                }
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0); // Limpa a tabela antes de adicionar os novos dados

                for (User user : users) {
                    Object[] row = {user.getId(), user.getNome(), user.getCpf(), user.getRg(), user.getDataNasc()};
                    model.addRow(row); // Adiciona cada usu√°rio como uma linha na tabela
                }
            } catch (SQLException e) {
                e.printStackTrace();
                throw e;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            txtPesquisa.setText(null);
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    public void atualizarTabela() throws ClassNotFoundException {
        List<User> users = new ArrayList<>();
        String sql = "SELECT id, nome, cpf, rg, dataNasc FROM tb_user";
        try (Connection conn = conexao.getConnection();
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                User user = new User();
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy"); // Define o formato desejado
                java.sql.Date dataNasc = rs.getDate("dataNasc"); // Obt√©m a data do ResultSet
                if (dataNasc != null) {
                    String dataNascStr = dateFormat.format(dataNasc); // Converte a data para String
                    user.setDataNasc(dataNascStr); // Define a data no objeto user
                } else {
                    user.setDataNasc(null); // Ou um valor padr√£o em caso de data nula
                }
                user.setId(rs.getInt("id"));
                user.setNome(rs.getString("nome"));
                user.setCpf(rs.getString("cpf"));
                user.setRg(rs.getString("rg"));
                users.add(user);
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); // Limpa a tabela antes de adicionar os novos dados

            for (User user : users) {
                Object[] row = {user.getId(), user.getNome(), user.getCpf(), user.getRg(), user.getDataNasc()};
                model.addRow(row); // Adiciona cada usu√°rio como uma linha na tabela
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Tratamento de erro, como exibir uma mensagem ao usu√°rio
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TelaInicial().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(TelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConn;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnShowTb;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblConn;
    private javax.swing.JTextField txtPesquisa;
    // End of variables declaration//GEN-END:variables
}
